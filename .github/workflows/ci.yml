name: CI

on:
  push:
      tags:
        - 'v*.*.*'

jobs:
#   build-linux:
#     name: Linux
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         buildType: [Debug, Release]
#         compiler: [gcc, clang]
#     env:
#       BUILDTYPE: ${{ matrix.buildType }}
#     steps:
#     - uses: actions/checkout@v1
#       with:
#         submodules: true
#     - name: Dependencies
#       env:
#         ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
#       run: |
#         sudo apt update
#         sudo apt install -y libcurl4-openssl-dev
#         if [ "${{ matrix.compiler }}" = "clang" ]; then
#           sudo apt install -y clang
#           echo "::set-env name=CC::clang"
#           echo "::set-env name=CXX::clang++"
#         fi
#     - name: Build it
#       run: make
#     - name: Test it
#       run: make test
#     - name: Test it (advanced)
#       run: make test-advanced
#   build-macos:
#     name: macOS
#     runs-on: macOS-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         buildType: [Debug, Release]
#     env:
#       BUILDTYPE: ${{ matrix.buildType }}
#     steps:
#     - uses: actions/checkout@v1
#       with:
#         submodules: true
#     - name: Build it
#       run: make
#     - name: Test it
#       run: make test
#     - name: Test it (advanced)
#       run: make test-advanced
#   build-alpine:
#     name: Alpine Linux
#     runs-on: ubuntu-latest
#     container: alpine:latest
#     strategy:
#       fail-fast: false
#       matrix:
#         buildType: [Debug, Release]
#     env:
#       BUILDTYPE: ${{ matrix.buildType }}
#     steps:
#     - uses: actions/checkout@v1
#       with:
#         submodules: true
#     - name: Prepare
#       run: apk add build-base cmake curl-dev --update-cache
#     - name: Build it
#       run: make
#     - name: Test it
#       run: make test
  build-windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        sys:
          - mingw32
#           - clang64
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        update: true
        install: >-
          git
          make
        pacboy: >-
          curl-winssl:p
          toolchain:p
          cmake:p
          ninja:p
    - name: Build it
      run: make
#     - name: Copy Deps and zip
#       run: |
#         mkdir release
#         cp -f  /c/Windows/SYSTEM32/ntdll.dll /c/Windows/System32/KERNEL32.DLL /c/Windows/System32/KERNELBASE.dll /c/Windows/System32/ADVAPI32.dll /c/Windows/System32/msvcrt.dll /c/Windows/System32/sechost.dll /c/Windows/System32/RPCRT4.dll /c/Windows/System32/USER32.dll /c/Windows/System32/win32u.dll /c/Windows/SYSTEM32/IPHLPAPI.DLL /c/Windows/System32/GDI32.dll /c/Windows/System32/gdi32full.dll /c/Windows/System32/msvcp_win.dll /mingw64/bin/libwinpthread-1.dll /c/Windows/System32/ucrtbase.dll /c/Windows/System32/WS2_32.dll /c/Windows/SYSTEM32/USERENV.dll /mingw64/bin/libcurl-4.dll /c/Windows/System32/CRYPT32.dll /c/Windows/System32/WLDAP32.dll /mingw64/bin/libbrotlidec.dll /mingw64/bin/libidn2-0.dll /mingw64/bin/libpsl-5.dll /mingw64/bin/libssh2-1.dll /mingw64/bin/zlib1.dll /mingw64/bin/libzstd.dll /mingw64/bin/libbrotlicommon.dll /mingw64/bin/libiconv-2.dll /mingw64/bin/libintl-8.dll /mingw64/bin/libunistring-2.dll /c/Windows/SYSTEM32/bcrypt.dll /c/Windows/SYSTEM32/CRYPTBASE.DLL ./release/
#         cp ./build/tjs.exe ./build/bundle.js ./build/eval-stdin.js ./build/repl.js ./build/std.js ./build/worker-bootstrap.js  ./release/
#     - uses: papeloto/action-zip@v1
#       with:
#         files: ./release/
#         dest: release_bin.zip
#     - name: Release
#       uses: softprops/action-gh-release@v1
#       with:
#         files: ./*.zip
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Show Deps
      run: ldd build/tjs.exe
    - name: Test it
      run: make test
